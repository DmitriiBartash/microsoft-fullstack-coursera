@using System.ComponentModel.DataAnnotations

<div class="event-card">
    @if (Editable)
    {
        <EditForm EditContext="_ctx"
                  OnValidSubmit="OnSaveAsync"
                  FormName="@FormName">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger small mb-2" />

            <div class="mb-2">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="_vm.Name" />
                <ValidationMessage For="@(()=>_vm.Name)" class="text-danger small" />
            </div>

            <div class="mb-2">
                <label class="form-label">Date</label>
                <InputDate class="form-control" @bind-Value="_vm.Date" />
                <ValidationMessage For="@(()=>_vm.Date)" class="text-danger small" />
            </div>

            <div class="mb-3">
                <label class="form-label">Location</label>
                <InputText class="form-control" @bind-Value="_vm.Location" />
                <ValidationMessage For="@(()=>_vm.Location)" class="text-danger small" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary">@SaveText</button>
                @if (ChildContent is not null)
                {
                    <div>@ChildContent</div>
                }
            </div>
        </EditForm>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body d-flex align-items-center justify-content-between gap-3">
                <div>
                    <div class="fw-semibold">@Name</div>
                    <div class="text-body-secondary small">@Date.ToString("d") Â· @Location</div>
                </div>
                @if (ChildContent is not null)
                {
                    <div>@ChildContent</div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Name { get; set; } = "";
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public string Location { get; set; } = "";
    [Parameter] public bool Editable { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback<string> NameChanged { get; set; }
    [Parameter] public EventCallback<DateTime> DateChanged { get; set; }
    [Parameter] public EventCallback<string> LocationChanged { get; set; }

    [Parameter] public string? FormName { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public string SaveText { get; set; } = "Save";

    private VM _vm = new();
    private EditContext? _ctx;

    protected override void OnParametersSet()
    {
        if (_ctx is null)
        {
            _vm = new() { Name = Name, Date = Date, Location = Location };
            _ctx = new EditContext(_vm);
        }
    }

    private async Task OnSaveAsync()
    {
        await NameChanged.InvokeAsync((_vm.Name ?? "").Trim());
        await DateChanged.InvokeAsync(_vm.Date);
        await LocationChanged.InvokeAsync((_vm.Location ?? "").Trim());
        if (OnSave.HasDelegate) await OnSave.InvokeAsync();
    }

    private sealed class VM
    {
        [Required, StringLength(100, MinimumLength = 2)]
        public string Name { get; set; } = "";
        [Range(typeof(DateTime), "2000-01-01", "2100-12-31", ErrorMessage = "Date is out of range")]
        public DateTime Date { get; set; } = DateTime.Today;
        [Required, StringLength(100, MinimumLength = 2)]
        public string Location { get; set; } = "";
    }
}
